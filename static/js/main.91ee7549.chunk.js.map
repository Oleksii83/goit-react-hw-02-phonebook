{"version":3,"sources":["Component/PhonebookForm/PhonebookForm.js","App.js","reportWebVitals.js","index.js"],"names":["Form","state","contacts","name","number","nameInputId","shortid","generate","numberInputId","handleChange","e","setState","currentTarget","value","handleSubmit","preventDefault","reset","className","onSubmit","this","htmlFor","onChange","type","id","pattern","title","required","Component","App","formSubmitHandler","data","console","log","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+SA2EeA,E,4MAvEbC,MAAQ,CACNC,SAAU,GACVC,KAAM,GACNC,OAAQ,I,EAGVC,YAAcC,IAAQC,W,EACtBC,cAAgBF,IAAQC,W,EAExBE,aAAe,SAAAC,GACb,EAAKC,SAAL,eACGD,EAAEE,cAAcT,KAAOO,EAAEE,cAAcC,S,EAc5CC,aAAe,SAAAJ,GACbA,EAAEK,iBACF,EAAKC,S,EAEPA,MAAQ,WACN,EAAKL,SAAS,CAAER,KAAM,GAAIC,OAAQ,M,4CAGpC,WACE,OACE,uBAAMa,UAAU,kBAAkBC,SAAUC,KAAKL,aAAjD,UACE,oBAAIG,UAAU,aAAd,oBACA,uBAAOG,QAASD,KAAKd,YAArB,SACE,uBACEY,UAAU,QACVJ,MAAOM,KAAKlB,MAAME,KAClBkB,SAAUF,KAAKV,aACfa,KAAK,OACLnB,KAAK,OACLoB,GAAIJ,KAAKd,YACTmB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,MAGZ,wBAAOT,UAAU,oBAAoBG,QAASD,KAAKd,YAAnD,UACE,oBAAIY,UAAU,aAAd,sBACA,uBACEJ,MAAOM,KAAKlB,MAAMG,OAClBiB,SAAUF,KAAKV,aACfa,KAAK,MACLnB,KAAK,SACLoB,GAAIJ,KAAKX,cACTgB,QAAQ,yFACRC,MAAM,giBACNC,UAAQ,OAGZ,wBAAQJ,KAAK,SAASL,UAAU,YAAhC,+B,GAhEWU,aCmBJC,E,4MAhBb3B,MAAQ,G,EAER4B,kBAAoB,SAAAC,GAClBC,QAAQC,IAAIF,I,4CAGd,WACE,OACE,sBAAKb,UAAU,aAAf,UACE,2CACA,cAAC,EAAD,CAAMC,SAAUC,KAAKU,2B,GAXXF,aCOHM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.91ee7549.chunk.js","sourcesContent":["import { Component } from 'react';\r\nimport shortid from 'shortid';\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    contacts: [],\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  nameInputId = shortid.generate();\r\n  numberInputId = shortid.generate();\r\n\r\n  handleChange = e => {\r\n    this.setState({\r\n      [e.currentTarget.name]: e.currentTarget.value,\r\n    });\r\n  };\r\n\r\n  //   handleNameChange = e => {\r\n  //     const { name, value } = e.currentTarget;\r\n  //     this.setState({ [name]: value });\r\n  //   };\r\n\r\n  //   handleNumberChange = e => {\r\n  //     const { number, value } = e.currentTarget;\r\n  //     this.setState({ [number]: value });\r\n  //   };\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    this.reset();\r\n  };\r\n  reset = () => {\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className=\"Input-container\" onSubmit={this.handleSubmit}>\r\n        <h3 className=\"Input-name\"> Name </h3>\r\n        <label htmlFor={this.nameInputId}>\r\n          <input\r\n            className=\"Input\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            id={this.nameInputId}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n        <label className=\"TelInputContainer\" htmlFor={this.nameInputId}>\r\n          <h3 className=\"Input-name\"> Number </h3>\r\n          <input\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            id={this.numberInputId}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className=\"input-btn\">\r\n          Add cotact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Form;\r\n","import { Component } from 'react';\nimport './App.css';\nimport Form from './Component/PhonebookForm/PhonebookForm';\n// import { NIL as NIL_UUID } from 'uuid';\n\nclass App extends Component {\n  state = {};\n\n  formSubmitHandler = data => {\n    console.log(data);\n  };\n\n  render() {\n    return (\n      <div className=\"Input-form\">\n        <h2>Phonebook</h2>\n        <Form onSubmit={this.formSubmitHandler} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}